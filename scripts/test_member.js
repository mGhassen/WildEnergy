#!/usr/bin/env node

/**
 * Script to create individual test member users in WildEnergy Supabase
 * Usage: node scripts/test_member.js [number]
 * Example: node scripts/test_member.js 1 (creates member1@wildenergy.gym)
 */

const { createClient } = require('@supabase/supabase-js');
require('dotenv').config();

// Get the member number from command line arguments
const memberNumber = process.argv[2];

if (!memberNumber || isNaN(parseInt(memberNumber))) {
  console.error('‚ùå Error: Please provide a valid member number');
  console.log('Usage: node scripts/test_member.js [number]');
  console.log('Example: node scripts/test_member.js 1');
  process.exit(1);
}

// Supabase configuration from environment variables
const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL || process.env.SUPABASE_URL;
const anonKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || process.env.SUPABASE_ANON_KEY;
const serviceRoleKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

// Validate required environment variables
if (!supabaseUrl) {
  console.error('‚ùå Error: NEXT_PUBLIC_SUPABASE_URL or SUPABASE_URL environment variable is required');
  process.exit(1);
}

if (!anonKey) {
  console.error('‚ùå Error: NEXT_PUBLIC_SUPABASE_ANON_KEY or SUPABASE_ANON_KEY environment variable is required');
  process.exit(1);
}

if (!serviceRoleKey) {
  console.error('‚ùå Error: SUPABASE_SERVICE_ROLE_KEY environment variable is required to create users without signup');
  process.exit(1);
}

console.log(`üîó Using Supabase URL: ${supabaseUrl}`);
const supabase = createClient(supabaseUrl, anonKey);
const admin = createClient(supabaseUrl, serviceRoleKey);

// Generate member data based on number
function generateMemberData(number) {
  const firstName = `Member${number}`;
  const lastName = 'Test';
  const email = `member${number}@wildenergy.gym`;
  const password = 'password123';
  const profileEmail = `member${number}.contact@wildenergy.gym`;
  const phone = `+216 20 123 ${String(460 + parseInt(number)).padStart(3, '0')}`;
  const address = 'Tunis, Tunisia';
  const profession = 'Test User';
  
  return {
    email,
    password,
    firstName,
    lastName,
    profileEmail,
    status: 'active',
    phone,
    address,
    profession,
    memberNotes: `Test member ${number} - Generated by script`,
    subscriptionStatus: 'active',
    credit: 50.00
  };
}

async function createTestMember(memberNumber) {
  const user = generateMemberData(memberNumber);
  
  console.log(`üöÄ Creating test member: ${user.email}...\n`);
  
  try {
    // Step 1: Create auth user using Admin API
    console.log(`üìù Creating auth user: ${user.email}`);
    const { data: authUser, error: authError } = await admin.auth.admin.createUser({
      email: user.email,
      password: user.password,
      email_confirm: true,
      user_metadata: {
        first_name: user.firstName,
        last_name: user.lastName
      }
    });
    
    if (authError) {
      console.error(`‚ùå Auth error: ${authError.message}`);
      return;
    }
    
    if (!authUser || !authUser.user) {
      console.error(`‚ùå No user returned for ${user.email}`);
      return;
    }
    
    console.log(`‚úÖ Auth user created: ${user.email} (ID: ${authUser.user.id})`);
    
    // Step 2: Create profile record
    console.log(`üìù Creating profile record...`);
    const { data: profileRecord, error: profileError } = await supabase
      .from('profiles')
      .insert({
        first_name: user.firstName,
        last_name: user.lastName,
        phone: user.phone,
        profile_email: user.profileEmail,
        address: user.address,
        profession: user.profession
      })
      .select()
      .single();
    
    if (profileError) {
      console.error(`‚ùå Profile creation error: ${profileError.message}`);
      return;
    }
    
    console.log(`‚úÖ Profile record created: ${profileRecord.id}`);
    
    // Step 3: Create account record
    console.log(`üìù Creating account record...`);
    const { data: accountRecord, error: accountError } = await supabase
      .from('accounts')
      .insert({
        id: authUser.user.id,
        auth_user_id: authUser.user.id,
        email: user.email,
        status: user.status,
        is_admin: false,
        profile_id: profileRecord.id
      })
      .select()
      .single();
    
    if (accountError) {
      console.error(`‚ùå Account creation error: ${accountError.message}`);
      return;
    }
    
    console.log(`‚úÖ Account record created: ${accountRecord.id}`);
    
    // Step 4: Create member record
    console.log(`üìù Creating member record...`);
    const { data: memberRecord, error: memberError } = await supabase
      .from('members')
      .insert({
        account_id: authUser.user.id,
        profile_id: profileRecord.id,
        member_notes: user.memberNotes,
        credit: user.credit,
        status: user.status
      })
      .select()
      .single();
    
    if (memberError) {
      console.error(`‚ùå Member record creation error: ${memberError.message}`);
      return;
    }
    
    console.log(`‚úÖ Member record created: ${memberRecord.id}`);
    
    // Step 5: Create onboarding record (mark as completed for testing)
    console.log(`üìù Creating onboarding record...`);
    const { data: onboardingRecord, error: onboardingError } = await supabase
      .from('member_onboarding')
      .insert({
        member_id: memberRecord.id,
        personal_info_completed: true,
        physical_profile_completed: true,
        discovery_completed: true,
        terms_accepted: true,
        terms_accepted_at: new Date().toISOString(),
        onboarding_completed: true,
        onboarding_completed_at: new Date().toISOString(),
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString()
      })
      .select()
      .single();
    
    if (onboardingError) {
      console.error(`‚ùå Onboarding record creation error: ${onboardingError.message}`);
      // Don't return here, as the member is still usable
    } else {
      console.log(`‚úÖ Onboarding record created: ${onboardingRecord.id}`);
    }
    
    console.log(`\nüéâ Member ${user.email} created successfully!`);
    console.log(`\nüîê Login Credentials:`);
    console.log(`Email: ${user.email}`);
    console.log(`Password: ${user.password}`);
    console.log(`\nüìä Member Details:`);
    console.log(`- Name: ${user.firstName} ${user.lastName}`);
    console.log(`- Phone: ${user.phone}`);
    console.log(`- Profile Email: ${user.profileEmail}`);
    console.log(`- Address: ${user.address}`);
    console.log(`- Profession: ${user.profession}`);
    console.log(`- Credit: ${user.credit} TND`);
    console.log(`- Status: ${user.status}`);
    console.log(`- Onboarding: Completed`);
    
  } catch (error) {
    console.error(`‚ùå Error creating member ${user.email}: ${error.message}`);
  }
}

// Run the script
createTestMember(memberNumber).catch(console.error);
